import os, sys, csv
from crewai import Agent, Task, Crew, LLM

from prettytable import PrettyTable

def get_max_width_of_each_column(csv_dataaaa):
  fields = csv_dataaaa[0]
  max_width_of_each_column = {field: 3 for field in fields}

  for col_no in range(len(fields)):
    for row_no in range(len(csv_dataaaa)):
      cell_data = str(csv_dataaaa[row_no][col_no])
      subby = 2 if fields[col_no].lower() != "amount" else 4

      if len(cell_data) > max_width_of_each_column[fields[col_no]] - subby:
        max_width_of_each_column[fields[col_no]] = len(cell_data) + subby

  return max_width_of_each_column

def transformed_table(data_lines):
  GOOGLE_API_KEY = os.environ.get("GOOGLE_API_KEY")
  if not GOOGLE_API_KEY:
    raise ValueError("\nGOOGLE_API_KEY environment variable not set. \nPlease set it as a secret in your GitHub repository. \nIf in command line/terminal, run the command: export GOOGLE_API_KEY='YOUR_API_KEY' ")

  llm = LLM(
    model="gemini/gemini-2.0-flash",
    temperature=0.5,
    api_key=GOOGLE_API_KEY
  )

  table_generator = Agent(
    role = "2D Array to PrettyTable ASCII Table Converter",

    goal = '''Given a 2D array (list of lists) called {csv_data}, generate a classic ASCII table for terminal/plain text viewing using PrettyTable from the prettytable module in Python.
    Use PrettyTable's API to create the table, set field names, add rows, and adjust alignments.
    Set each column's width to the value specified in {maximum_width_of_each_column}.
    Left-align all text columns. Right-align all numeric columns.
    Don't change the data that is given in the {csv_data}, treat it as exact values.
    Output only the ASCII table string produced by PrettyTable's get_string() methodâ€”no Markdown, no extra formatting, no explanations.''',

    backstory = "You are an expert Python developer who always uses PrettyTable from the prettytable module to generate visually appealing ASCII tables from CSV data. You never hand-format tables; you rely exclusively on PrettyTable's features.",

    llm = llm,
    verbose = False
  )

  conformer = Agent(
    role = "PrettyTable Table Conformance Checker",

    goal = '''Given an ASCII table generated by PrettyTable, verify that:
    - Pipes (|) separate all columns.
    - Dashes (-) are used for horizontal lines.
    - All text columns are left-aligned, all numeric columns are right-aligned.
    - Each column matches the width in {maximum_width_of_each_column}.
    - The table is generated using PrettyTable from the prettytable module (not by manual formatting).
    - No Markdown, no center alignment, no multi-line cells.
    If the table fails any rule, return which rules were violated and request regeneration.
    Else, return the valid, generated table''',

    backstory = "You are an expert in verifying that ASCII tables are generated using PrettyTable and conform to all visual and formatting requirements.",

    llm = llm,
    max_iter = 500,
    verbose = False
  )

  table_maker = Task(
    name = "ASCII Table Converter using PrettyTable",
    agent = table_generator,

    description = '''Given a 2D array (list of lists) called {csv_data}, and a dictionary {maximum_width_of_each_column} mapping column names to their desired widths, generate a visually pleasing ASCII table using PrettyTable from the prettytable module.
    Use PrettyTable's API to set field names, add all rows, and set the alignment for each column (left for text, right for numbers).
    Set each column's width to the value in {maximum_width_of_each_column} using PrettyTable's column width features.
    Output only the ASCII table string from PrettyTable (get_string()), with no Markdown or additional formatting.
    ''',

    expected_output = "A properly aligned ASCII table string generated by PrettyTable, with left-aligned text columns and right-aligned numeric columns, matching the specified column widths."
  )

  check_if_conforms = Task(
    name = "ASCII Table Conformance Check",
    agent = conformer,

    description = '''Given an ASCII table generated from {csv_data} using PrettyTable, check that it:
    - Uses pipes (|) to separate columns and dashes (-) for horizontal lines.
    - Left-aligns all text columns and right-aligns all numeric columns.
    - Sets each column's width to {maximum_width_of_each_column}.
    - Was generated using PrettyTable from the prettytable module.
    - Does not use Markdown, center alignment, or multi-line cells.
    If the table fails any rule, specify which rules were violated and request regeneration. If all rules are followed, return the generated table.''',

    expected_output = "If it does not conform to all rules, list the specific rule violations and suggest corrections. If it conforms, then return the generated table."
  )

  crewww = Crew(
    agents = [table_generator, conformer],
    tasks = [table_maker, check_if_conforms],
    verbose = False,
    chat_llm = llm
  )

  max_width_of_each_column = get_max_width_of_each_column(data_lines)

  resp = crewww.kickoff(inputs={"csv_data": data_lines, "maximum_width_of_each_column": max_width_of_each_column})

  return (resp.raw.strip('```')).strip('markdown')

if __name__ == "__main__":
  curr_csv = ""

  for folders, _, files in os.walk("/Users/rakshita/dev/rakshita/finance-tracker/saved_files"):
    for file in files:
      if file[len(file)-4 : len(file)] == '.csv':
        curr_csv = ''.join(os.path.join(os.getcwd(), os.path.join(folders, file)).split('./'))
        break

  csv_file = open(curr_csv, mode='r', encoding='utf-8')
  csv_data = csv.reader(csv_file)
  data_lines = list(csv_data)
  csv_file.close()

  resp_raw = transformed_table(data_lines)
  print(resp_raw)
